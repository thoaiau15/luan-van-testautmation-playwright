import heapq

def shortest_paths_count(n, edges):
    MOD = 10**9 + 7
    graph = {i: [] for i in range(1, n + 1)}
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))

    distances = [float('inf')] * (n + 1)
    counts = [0] * (n + 1)
    distances[1] = 0
    counts[1] = 1

    min_heap = [(0, 1)]

    while min_heap:
        dist, node = heapq.heappop(min_heap)
        if dist > distances[node]:
            continue
        for neighbor, weight in graph[node]:
            if distances[node] + weight < distances[neighbor]:
                distances[neighbor] = distances[node] + weight
                counts[neighbor] = counts[node]
                heapq.heappush(min_heap, (distances[neighbor], neighbor))
            elif distances[node] + weight == distances[neighbor]:
                counts[neighbor] = (counts[neighbor] + counts[node]) % MOD

    return counts[n]

# Đọc đầu vào
n, m = map(int, input().split())
edges = [tuple(map(int, input().split())) for _ in range(m)]

# Tìm số lượng đường đi ngắn nhất và in ra kết quả
result = shortest_paths_count(n, edges)
print(result)
